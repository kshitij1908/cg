#include <GL/glut.h>
#include <cmath>

// Structure to represent a 2D point
struct Point {
    float x, y;
};

Point p0, p1, p2, p3; // Control points
int numPoints = 0;    // Counter to track how many control points have been selected

// Recursive function to draw the cubic Bézier curve
void drawBezierCurve(Point p0, Point p1, Point p2, Point p3) {
    // Flatness check to stop recursion
    float dx = p3.x - p0.x;
    float dy = p3.y - p0.y;
    if ((dx * dx + dy * dy) < 1.0f) {
        glBegin(GL_POINTS);
        glVertex2f(p0.x, p0.y);
        glEnd();
        return;
    }

    // Midpoints of segments
    Point p01 = {(p0.x + p1.x) / 2, (p0.y + p1.y) / 2};
    Point p12 = {(p1.x + p2.x) / 2, (p1.y + p2.y) / 2};
    Point p23 = {(p2.x + p3.x) / 2, (p2.y + p3.y) / 2};

    Point p012 = {(p01.x + p12.x) / 2, (p01.y + p12.y) / 2};
    Point p123 = {(p12.x + p23.x) / 2, (p12.y + p23.y) / 2};

    Point p0123 = {(p012.x + p123.x) / 2, (p012.y + p123.y) / 2};

    // Recursive subdivision
    drawBezierCurve(p0, p01, p012, p0123);
    drawBezierCurve(p0123, p123, p23, p3);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw control polygon
    if (numPoints == 4) {
        glColor3f(1, 0, 0); // Red color
        glBegin(GL_LINE_STRIP);
        glVertex2f(p0.x, p0.y);
        glVertex2f(p1.x, p1.y);
        glVertex2f(p2.x, p2.y);
        glVertex2f(p3.x, p3.y);
        glEnd();

        // Draw Bézier curve in blue
        glColor3f(0, 0, 1);
        drawBezierCurve(p0, p1, p2, p3);
    }

    glFlush();
}

// Collect control points with mouse right-click
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN) {
        Point clickedPoint = {static_cast<float>(x), static_cast<float>(500 - y)};
        if (numPoints == 0) p0 = clickedPoint;
        else if (numPoints == 1) p1 = clickedPoint;
        else if (numPoints == 2) p2 = clickedPoint;
        else if (numPoints == 3) p3 = clickedPoint;

        numPoints++;
        if (numPoints == 4) {
            glutPostRedisplay(); // Refresh display after 4 points
        }
    }
}

void init() {
    glClearColor(1, 1, 1, 1); // white background
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 500, 0, 500); // 2D orthographic projection
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Cubic Bezier Curve (Right Click to Add Points)");
    
    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutMainLoop();
    return 0;
}
