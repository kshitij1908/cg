#include <GL/glut.h>
#include <iostream>
#include <queue>
using namespace std;
// Colors
float floodFillColor[3] = {0, 0, 1}; // Blue for Flood Fill
float boundaryFillColor[3] = {1, 1, 0}; // Yellow for Boundary Fill
float backgroundColor[3] = {1, 1, 1}; // White Background
float boundaryColor[3] = {0, 0, 0};   // Black Boundary
// Selected fill method
int fillMethod = 1; // 1 -> Flood Fill, 2 -> Boundary Fill
// Function to get pixel color
void getPixelColor(int x, int y, float color[3]) {
glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, color);
}
// Function to set pixel color
void setPixel(int x, int y, float color[3]) {
glColor3fv(color);
glBegin(GL_POINTS);
glVertex2i(x, y);
glEnd();
glFlush();
}
// Flood Fill Algorithm
void floodFill(int x, int y) {
float color[3];
getPixelColor(x, y, color);
if (color[0] != backgroundColor[0] || color[1] != backgroundColor[1] || color[2] != 
backgroundColor[2]) {
return;
}
setPixel(x, y, floodFillColor);
floodFill(x + 1, y);
floodFill(x - 1, y);
floodFill(x, y + 1);
floodFill(x, y - 1);
}
// Boundary Fill Algorithm
void boundaryFill(int x, int y) {
float color[3];
getPixelColor(x, y, color);
if ((color[0] == boundaryColor[0] && color[1] == boundaryColor[1] && color[2] == 
boundaryColor[2]) ||
(color[0] == boundaryFillColor[0] && color[1] == boundaryFillColor[1] && color[2] 
== boundaryFillColor[2])) {
return;
}
setPixel(x, y, boundaryFillColor);
boundaryFill(x + 1, y);
boundaryFill(x - 1, y);
boundaryFill(x, y + 1);
boundaryFill(x, y - 1);
}
// Mouse Click Function
void mouseClick(int button, int state, int x, int y) {
if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
int winY = glutGet(GLUT_WINDOW_HEIGHT) - y;
if (fillMethod == 1) 
       {
           floodFill(x, winY);
       } else {
           boundaryFill(x, winY);
       }
   }
}
// Display Function
void display() {
   glClear(GL_COLOR_BUFFER_BIT);
   glColor3fv(boundaryColor);
   glBegin(GL_LINE_LOOP);
   glVertex2i(250, 250);
   glVertex2i(350, 250);
   glVertex2i(350, 350);
   glVertex2i(250, 350);
   glEnd();
   glFlush();
}
// Menu Function
void menu(int option) {
   switch (option) {
       case 1: fillMethod = 1; break; // Flood Fill
       case 2: fillMethod = 2; break; // Boundary Fill
       case 3: exit(0); // Exit
   }
   glutPostRedisplay();
}
// Initialization Function
void init() {
   glClearColor(1.0, 1.0, 1.0, 1.0);
   glColor3f(0.0, 0.0, 0.0);
   glPointSize(1.0);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   gluOrtho2D(0, 640, 0, 480);
}
// Main Function
int main(int argc, char** argv) {
   glutInit(&argc, argv);
   glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
   glutInitWindowSize(640, 480);
   glutCreateWindow("Fill Algorithm Menu");
   init();
   glutDisplayFunc(display);
   glutMouseFunc(mouseClick);
   glutCreateMenu(menu);
   glutAddMenuEntry("Flood Fill", 1);
   glutAddMenuEntry("Boundary Fill", 2);
   glutAddMenuEntry("Exit", 3);
   glutAttachMenu(GLUT_RIGHT_BUTTON);
   glutMainLoop();
   return 0;
}